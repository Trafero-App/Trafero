import asyncpg
import asyncio
import os
from dotenv import load_dotenv, find_dotenv
from create_db_tables import recreate_tables
async def main():
    recreate_tables()

    load_dotenv(find_dotenv())
    db = await asyncpg.connect(os.getenv("db_url"))

    """
    passenger:
    =====================================================================
    | id | user_name | password  | first_name | last_name | phone_number|
    =====================================================================
    | 1  | User1     | User1pass | User1first | User1last | 11111111    |
    ---------------------------------------------------------------------
    | 2  | User2     | User2pass | User2first | User2last | 22222222    |
    ---------------------------------------------------------------------
    | 4  | User4     | User4pass | User4first | User4last | 44444444    |
    ---------------------------------------------------------------------
    | 5  | User5     | User5pass | User5first | User5last | 55555555    |
    =====================================================================

    route:
    =========================
    | id | file_name        |
    =========================
    | 1  | bus_15_1.geojson |
    -------------------------
    | 2  | bus_15_2.geojson |
    -------------------------
    | 3  | van_sea_road.geojson |
    =========================


    vehicle:
    ================================
    | id | route_id | phone_number |
    ================================ 
    | 1  | 2        | 11111112     |
    -------------------------------- 
    | 2  | 2        | 11111113     |
    -------------------------------- 
    | 3  | 2        | 11111114     |
    -------------------------------- 
    | 4  | 1        | 11111115     |
    -------------------------------- 
    | 5  | 1        | 11111116     |
    ================================
    vehicle_location: 
    ==========================================
    | id | longitude | latitude | vehicle_id |
    ==========================================
    | 1  | 35.5149   | 33.8966  | 1          |
    ------------------------------------------
    | 2  | 35.5119   | 33.8979  | 3          |
    ------------------------------------------
    | 3  | 35.5295   | 33.8987  | 2          |
    ------------------------------------------
    | 4  | 35.5276   | 33.8990  | 4          |
    ==========================================
    waypoint:
    ==========================================
    | id | longitude | latitude | route_id   |
    ==========================================
    """
    await db.execute("""INSERT INTO passenger 
                     (user_name, password, first_name, last_name, phone_number) VALUES
                     ('User1', 'User1pass', 'User1first', 'User1last', '11111111'),
                     ('User2', 'User2pass', 'User2first', 'User2last', '22222222'),
                     ('UserDUD', 'X', 'X', 'X', '90'),
                     ('User4', 'User4pass', 'User4first', 'User4last', '44444444'),
                     ('User5', 'User5pass', 'User5first', 'User5last', '55555555');


                     DELETE FROM passenger WHERE id=3;

                    INSERT INTO route (file_name) VALUES 
                     ('bus_15_1.geojson'), ('bus_15_2.geojson'),
                     ('beirut_saida_1.geojson'), ('beirut_saida_2.geojson'), ('van_4_1.geojson'), ('van_4_2.geojson'),
                     ('van_sea_road_1.geojson'), ('van_sea_road_2.geojson');

                    INSERT INTO vehicle (route_id, phone_number) VALUES 
                     (2, '11111112'), (2, '11111113'), (2, '11111114'), (1, '11111115'), (1, '11111116');
                     INSERT INTO vehicle_location (longitude, latitude, vehicle_id) VALUES
                    (35.5149, 33.8966, 1),
                    (35.5119, 33.8979, 3),
                    (35.5295, 33.8987, 2),
                    (35.5276, 33.8990, 4);
                     
                    INSERT INTO waypoint (longitude, latitude, route_id, projection_index) VALUES 
                    (35.549770,33.893568, 1, 0), (35.550345,33.893612, 1, 0), (35.550257,33.893953, 1, 0), (35.527903,33.899252, 1, 0),
                    (35.512803,33.897313, 1, 0), (35.501058,33.902061, 1, 0), (35.494315,33.902217, 1, 0),
                    (35.488325,33.901411, 1, 0), (35.470759,33.899928, 1, 0), (35.474010,33.886733, 1, 0), (35.483601,33.882138, 1, 0),
                    (35.495867,33.879112, 1, 0), (35.506941,33.878175, 1, 0), (35.512301,33.878567, 1, 0), (35.522318,33.879707, 1, 0),
                    (35.528226,33.882107, 1, 0), (35.529695,33.883657, 1, 0), (35.529864,33.881180, 1, 0), (35.535424,33.878790, 1, 0),
                    (35.537514,33.878331, 1, 0), (35.542767,33.878814, 1, 0), (35.540308,33.880782, 1, 0), (35.540037,33.879629, 1, 0),
                     
                    (35.540002, 33.879845, 2, 0), (35.538117, 33.878337, 2, 48), (35.531328, 33.883102, 2, 160),
                    (35.528302, 33.88242, 2, 220), (35.515335, 33.878857, 2, 358), (35.507801, 33.878318, 2, 432),
                    (35.491437, 33.880566, 2, 606), (35.4738, 33.887265, 2, 820), (35.470343, 33.89493, 2, 966),
                    (35.475335, 33.90162, 2, 1089), (35.485492, 33.90172, 2, 1199), (35.493217, 33.90122, 2, 1288),
                    (35.503917, 33.901601, 2, 1418), (35.512446, 33.897487, 2, 1543), (35.52458, 33.899189, 2, 1685),
                    (35.541633, 33.895861, 2, 1859), (35.549835, 33.893719, 2, 1947), (35.549777, 33.893579, 2, 1948),
                     
                    (35.494902, 33.875663, 3, 0), (35.493856, 33.862894, 3, 155), (35.493563, 33.848623, 3, 348),
                    (35.497731, 33.833362, 3, 555), (35.4982, 33.81763, 3, 797), (35.486706, 33.802825, 3, 997),
                    (35.477275, 33.784659, 3, 1248), (35.464307, 33.766235, 3, 1506), (35.453198, 33.741679, 3, 1829),
                    (35.441053, 33.701633, 3, 2342), (35.424672, 33.676096, 3, 2765), (35.423999, 33.656983, 3, 3016),
                    (35.402034, 33.630558, 3, 3479), (35.390934, 33.599087, 3, 3955), (35.386787, 33.588114, 3, 4099),
                    (35.38496, 33.582172, 3, 4171), (35.376466, 33.567235, 3, 4386), (35.37488, 33.565158, 3, 4423),
                     
                    (35.374861, 33.565187, 4, 0), (35.376099, 33.567906, 4, 74), (35.381682, 33.576067, 4, 194),
                    (35.402032, 33.60738, 4, 675), (35.419141, 33.651847, 4, 1351), (35.424938, 33.684284, 4, 1795),
                    (35.453706, 33.739151, 4, 2594), (35.466136, 33.767748, 4, 2971), (35.479172, 33.787295, 4, 3237),
                    (35.499392, 33.819022, 4, 3667), (35.502908, 33.830236, 4, 3825), (35.494105, 33.841819, 4, 4012),
                    (35.493976, 33.86115, 4, 4236), (35.495241, 33.875001, 4, 4403),
                     

                    (35.485447, 33.89684,  5, 0), (35.488068, 33.896187, 5, 32), (35.488936, 33.894374, 5, 72),
                    (35.495857, 33.894776, 5, 141), (35.506346, 33.891462, 5, 275), (35.506776, 33.883904, 5, 370),
                    (35.507143, 33.879831, 5, 419), (35.5084, 33.87567, 5, 480), (35.514994, 33.869782, 5, 573),
                    (35.516584, 33.865282, 5, 635), (35.519448, 33.85828, 5, 732), (35.519599, 33.856966, 5, 751),
                    (35.520861, 33.854238, 5, 789), (35.521598, 33.851316, 5, 828), (35.521288, 33.848443, 5, 870),
                    (35.515816, 33.848674, 5, 927), (35.516324, 33.844047, 5, 982), (35.517079, 33.837222, 5, 1075),
                    (35.517256, 33.833051, 5, 1137), (35.517322, 33.831661, 5, 1153), (35.517267, 33.830332, 5, 1183),
                    (35.515608, 33.829198, 5, 1210),
                     
                    (35.515581, 33.829171, 6, 0), (35.517508, 33.830229, 6, 33), (35.516949, 33.839385, 6, 181),
                    (35.515951, 33.848554, 6, 288), (35.521355, 33.848458, 6, 345), (35.520842, 33.854544, 6, 433),
                    (35.519701, 33.859151, 6, 499), (35.516476, 33.867362, 6, 615), (35.508585, 33.875683, 6, 745),
                    (35.507298, 33.879817, 6, 802), (35.506878, 33.884931, 6, 864), (35.506686, 33.890938, 6, 947),
                    (35.506919, 33.894014, 6, 995), (35.505105, 33.892552, 6, 1049), (35.496095, 33.895225, 6, 1166),
                    (35.495225, 33.895679, 6, 1183), (35.490888, 33.895315, 6, 1229), (35.488928, 33.895307, 6, 1249),
                    (35.484921, 33.895319, 6, 1292), (35.485421, 33.896841, 6, 1310),
                     
                    (35.491081, 33.901858, 7, 0), (35.483411, 33.902415, 7, 166), (35.471658, 33.900443, 7, 294), (35.477483, 33.884814, 7, 574),
                    (35.485399, 33.881194, 7, 673), (35.486209, 33.877556, 7, 729), (35.486155, 33.876384, 7, 743), (35.486208, 33.873462, 7, 782),
                    (35.485911, 33.863582, 7, 899), (35.486289, 33.860093, 7, 959), (35.493569, 33.859781, 7, 1034), (35.493712, 33.858154, 7, 1062),
                    (35.499498, 33.859456, 7, 1146), (35.50302, 33.859115, 7, 1184),
                     

                    (35.502304, 33.859348, 8, 0), (35.49441, 33.859983, 8, 77), (35.486012, 33.860569, 8, 175),
                    (35.486422, 33.866935, 8, 254), (35.486383, 33.873178, 8, 348), (35.486779, 33.879689, 8, 434),
                    (35.484797, 33.882053, 8, 474), (35.473984, 33.886964, 8, 615), (35.470563, 33.895946, 8, 780),
                    (35.475335, 33.90162, 8, 889), (35.490564, 33.901384, 8, 1054);
                     """)
    
    
    await db.close()



if __name__ == "__main__":
    asyncio.run(main())